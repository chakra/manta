package com.espendwise.tools.gencode.util;


import com.espendwise.tools.gencode.hbmxml.persistence.HbmPersistenceXmlAssist;
import com.espendwise.tools.gencode.spring.dbaccessxml.SpringDatabaseAccessXmlAssist;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.List;
import java.util.Map;

public class DataAccessJavaClassGenerator {

    private static final String TEMPLATE = "package com.espendwise.manta.service;\n" +
            "\n" +
            "//Generated by DataAccessJavaClassGenerator.java" +
            "\n" +
             "import javax.persistence.EntityManager;\n" +
            "import javax.persistence.PersistenceContext;\n" +
            "\n" +
            "public abstract class DatabaseAccess {\n" +
            "%1$s" +
            "%2$s" +
            "%3$s" +
            "\n" +
            "%4$s" +
            "%5$s" +
            "%6$s" +
            "\n" +
            "}";


    public String generate(List<Map.Entry<String, Map<String, ProjectDbProperty>>> entries) {

        String persistenceUnitNames = generateDeclarationPersistenceUnitNames(entries);
        String persistenceUnits = generateDeclarationPersistenceUnits(entries);
        String entityManagerGetterMethod = generateEntityManagetGetterMethod(entries);
        String mainUnitGetterMethod = generateMainUnitGetterMethod(entries);
        String constantsMethods =  generateConstantsMethods();
        String workUnitsArray = generateWorkUnitsArray(entries);

        return String.format(
                TEMPLATE,
                persistenceUnitNames,
                workUnitsArray,
                persistenceUnits,
                entityManagerGetterMethod,
                mainUnitGetterMethod,
                constantsMethods
        );
    }

    private String generateMainUnitGetterMethod(List<Map.Entry<String, Map<String, ProjectDbProperty>>> entries) {
      
        StringWriter buffer = new StringWriter();
        PrintWriter writer = new PrintWriter(buffer);

        writer.println();

        boolean mainUniExist = false;
        for (Map.Entry<String, Map<String, ProjectDbProperty>> e : entries) {
            if (e.getKey().equalsIgnoreCase(ProjectDbProperty.MAIN_UNIT_ID)) {
                mainUniExist = true;
            }
        }

        writer.println(tab(1) + "public static String getMainUnit() {");
        writer.print(tab(2) + "return " + (mainUniExist
                ? "PERSISTENCE_UNIT_" + ProjectDbProperty.MAIN_UNIT_ID.toUpperCase()
                : "null"));
        writer.println(";");
        writer.println(tab(1) +"}");

       return buffer.getBuffer().toString();
    }

    private String generateConstantsMethods() {

        StringWriter buffer = new StringWriter();
        PrintWriter writer = new PrintWriter(buffer);

        writer.println();

        writer.println(tab(1) + "public static String[] availableUnits() {");
        writer.println(tab(2) + "return AVAILABLE_UNITS;");
        writer.println(tab(1) + "}");

        return buffer.getBuffer().toString();
    }

    private String generateEntityManagetGetterMethod(List<Map.Entry<String, Map<String, ProjectDbProperty>>> entries) {

        StringWriter buffer = new StringWriter();
        PrintWriter writer = new PrintWriter(buffer);

        writer.println();

        writer.println(tab(1) + "public EntityManager getEntityManager(String unit) {");
        int i = 0;
        for (Map.Entry<String, Map<String, ProjectDbProperty>> e : entries) {
            writer.print((i == 0 ? tab(2) + "if(" : " else if("));
            writer.print("PERSISTENCE_UNIT_" + e.getKey().toUpperCase() + ".equals(unit)");
            writer.println(") {");
            writer.println(tab(3) + "return " + SpringDatabaseAccessXmlAssist.getName(SpringDatabaseAccessXmlAssist.ENTITY_MANAGER_PROPERTY_ID_PREFIX, e.getKey()) + ";");
            writer.print(tab(2) + "}");
            i++;
        }
        writer.println();
        writer.println();
        writer.println(tab(2) + "return null;");
        writer.println();
        writer.println(tab(1) + "}");

        return buffer.getBuffer().toString();

    }

    private String tab(int i) {
        String s = "";
        for (int j = 0; j < i; j++) {
            s += "    ";
        }
        return s;
    }

    private String generateDeclarationPersistenceUnitNames(List<Map.Entry<String, Map<String, ProjectDbProperty>>> entries) {

        StringWriter buffer = new StringWriter();
        PrintWriter writer = new PrintWriter(buffer);

        writer.println();

        String s = "";
        for (Map.Entry<String, Map<String, ProjectDbProperty>> e : entries) {
            writer.print(tab(1) + "private static final String PERSISTENCE_UNIT_" + e.getKey().toUpperCase() + " = ");
            writer.println("\"" + HbmPersistenceXmlAssist.PERSISTENCE_UNIT_PREFIX + e.getKey() + "\";");
        }

        return buffer.getBuffer().toString();
    }

    private String generateDeclarationPersistenceUnits(List<Map.Entry<String, Map<String, ProjectDbProperty>>> entries) {

        StringWriter buffer = new StringWriter();
        PrintWriter writer = new PrintWriter(buffer);

        writer.println();

        for (Map.Entry<String, Map<String, ProjectDbProperty>> e : entries) {
            writer.println();
            writer.println(tab(1) + "@PersistenceContext(unitName = PERSISTENCE_UNIT_" + e.getKey().toUpperCase() + ")");
            writer.println(tab(1) + "private transient EntityManager "+SpringDatabaseAccessXmlAssist.getName(SpringDatabaseAccessXmlAssist.ENTITY_MANAGER_PROPERTY_ID_PREFIX, e.getKey())+";");
        }

        return buffer.getBuffer().toString();
    }

    private String generateWorkUnitsArray(List<Map.Entry<String, Map<String, ProjectDbProperty>>> entries) {

        StringWriter buffer = new StringWriter();
        PrintWriter writer = new PrintWriter(buffer);

        writer.println();

        writer.println(tab(1) + "private static final String[] AVAILABLE_UNITS =  new String[] {");

        int i = 0;
        for (Map.Entry<String, Map<String, ProjectDbProperty>> e : entries) {
            if (!e.getKey().equalsIgnoreCase(ProjectDbProperty.MAIN_UNIT_ID)) {
                writer.println(tab(2) + "PERSISTENCE_UNIT_" + e.getKey().toUpperCase() + ((i < entries.size() - 1) ? "," : ""));
            }
            i++;
        }

        writer.println(tab(1) + "};");

        return buffer.getBuffer().toString();
    }


}

